{"version":3,"sources":["Components/PlayerCard.js","Components/PlayersList.js","hooks/useDarkMode.js","hooks/useLocalStorage.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["PlayerCard","props","player","id","name","country","searches","Card","key","Content","Header","Meta","Description","PlayersList","players","className","map","item","useDarkMode","initialValues","initialValue","useState","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","value","setItem","stringify","useLocalStorage","darkMode","setDarkMode","useEffect","document","body","classList","add","remove","NavBar","data-testid","onClick","event","preventDefault","App","state","this","mounted","axios","get","then","response","setState","data","catch","error","console","log","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAkBeA,EAfI,SAACC,GAAW,IAAD,EACcA,EAAMC,OAAtCC,EADkB,EAClBA,GAAIC,EADc,EACdA,KAAMC,EADQ,EACRA,QAASC,EADD,EACCA,SAC3B,OACI,kBAACC,EAAA,EAAD,CAAMC,IAAKL,GACP,kBAACI,EAAA,EAAKE,QAAN,KACI,kBAACF,EAAA,EAAKG,OAAN,KAAcN,GACd,kBAACG,EAAA,EAAKI,KAAN,KAAYN,GACZ,kBAACE,EAAA,EAAKK,YAAN,kBACeN,MCChBO,EATK,SAACZ,GAAW,IACpBa,EAAYb,EAAZa,QACR,OACI,yBAAKC,UAAU,cACVD,EAAQE,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAYf,OAAQe,EAAMT,IAAKS,EAAKd,U,QCJxDe,EAAc,SAACV,EAAKW,GAAmB,IAAD,ECDpB,SAACX,EAAKY,GAAkB,IAAD,EACZC,oBAAS,WAC3C,IAAMJ,EAAOK,OAAOC,aAAaC,QAAQhB,GACzC,OAAOS,EAAOQ,KAAKC,MAAMT,GAAQG,KAHa,mBAC3CO,EAD2C,KAC9BC,EAD8B,KAWlD,MAAO,CAACD,EALS,SAAAE,GACbP,OAAOC,aAAaO,QAAQtB,EAAKiB,KAAKM,UAAUF,IAChDD,EAAeC,KDNaG,CAAgBxB,EAAKW,GADN,mBACxCc,EADwC,KAC9BC,EAD8B,KAY/C,OATAC,qBAAU,YACW,IAAbF,EACAG,SAASC,KAAKC,UAAUC,IAAI,aAG5BH,SAASC,KAAKC,UAAUE,OAAO,eAEpC,CAACP,IAEG,CAACA,EAAUC,IEMPO,EAlBA,WAAO,IAAD,EACevB,EAAY,YAAY,GADvC,mBACVe,EADU,KACAC,EADA,KAOjB,OACI,yBAAKnB,UAAU,UACX,qFACA,yBAAKA,UAAU,oBAAoB2B,cAAY,aAC/C,yBAAKC,QATM,SAAAC,GACfA,EAAMC,iBACNX,GAAaD,IAQTlB,UAAWkB,EAAW,iBAAmB,cCoBtCa,E,YA3Bb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXjC,QAAS,IAHA,E,iFAOO,IAAD,OACjBkC,KAAKC,SAAU,EACfC,IACCC,IAAI,qCACJC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACxC,QAASuC,EAASE,UAElCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAI5B,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaD,QAASkC,KAAKD,MAAMjC,e,GAtBvB8C,IAAMC,WCKJC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.03c74091.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'semantic-ui-react';\n\nconst PlayerCard = (props) => {\n    const { id, name, country, searches } = props.player \n    return (\n        <Card key={id}>\n            <Card.Content>\n                <Card.Header>{name}</Card.Header>\n                <Card.Meta>{country}</Card.Meta>\n                <Card.Description>\n                    Searches: {searches}\n                </Card.Description>\n            </Card.Content>\n        </Card>\n    )\n}\n\nexport default PlayerCard;\n\n","import React from 'react';\nimport PlayerCard from './PlayerCard';\n\nconst PlayersList = (props) => {\n    const { players } = props;\n    return(\n        <div className=\"playersBox\">\n            {players.map(item => <PlayerCard player={item} key={item.id}/>)}\n        </div>\n    )\n}\n\nexport default PlayersList;\n","import { useLocalStorage } from './useLocalStorage';\nimport { useEffect } from 'react';\n\nexport const useDarkMode = (key, initialValues) => {\n    const [darkMode, setDarkMode] = useLocalStorage(key, initialValues);\n\n    useEffect(() => {\n        if (darkMode === true ) {\n            document.body.classList.add(\"dark-mode\");\n        }\n        else{\n            document.body.classList.remove(\"dark-mode\")\n        }\n    }, [darkMode]);\n\n    return [darkMode, setDarkMode]\n}\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n    const [storedValue, setStoredValue] = useState(() => {\n        const item = window.localStorage.getItem(key);\n        return item ? JSON.parse(item) : initialValue;\n    });\n\n    const setValue = value => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n        setStoredValue(value);\n    }\n\n    return [storedValue, setValue];\n}","import React from 'react';\nimport { useDarkMode } from '../hooks/useDarkMode';\n\nconst NavBar = () => {\n    const [darkMode, setDarkMode] = useDarkMode(\"darkMode\", false);\n    const toggleMode = event => {\n        event.preventDefault();\n        setDarkMode(!darkMode);\n    };\n\n    return(\n        <nav className=\"navbar\">\n            <h1>Women's World Cup Players Searches - June ~ July 2019</h1>\n            <div className=\"dark-mode__toggle\" data-testid=\"dark-mode\">\n            <div onClick={toggleMode} \n            className={darkMode ? 'toggle toggled' : 'toggle'}/>\n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport PlayersList from './Components/PlayersList';\nimport NavBar from './Components/NavBar';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      players: [],\n    }\n  }\n\n  componentDidMount(){\n    this.mounted = true;\n    axios\n    .get('http://localhost:5000/api/players')\n    .then(response => {\n      this.setState({players: response.data})\n    })\n    .catch(error => console.log(error))\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <NavBar/>\n        <PlayersList players={this.state.players}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}